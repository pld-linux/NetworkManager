diff -urN NetworkManager-0.7rev3096/src/backends/Makefile.am NetworkManager-0.7rev3096.new/src/backends/Makefile.am
--- NetworkManager-0.7rev3096/src/backends/Makefile.am	2007-11-20 11:06:21.000000000 +0100
+++ NetworkManager-0.7rev3096.new/src/backends/Makefile.am	2007-11-20 11:31:15.000000000 +0100
@@ -53,6 +53,13 @@
 libnmbackend_la_LIBADD += -lfwnetconfig -lfwutil
 endif
 
+if TARGET_PLD
+libnmbackend_la_SOURCES +=	NetworkManagerPLD.c \
+				shvar.c					\
+				shvar.h
+endif
+
+
 libnmbackend_la_LIBADD += $(DBUS_LIBS) $(GTHREAD_LIBS)
 libnmbackend_la_CPPFLAGS =	$(DBUS_CFLAGS)				\
 					$(GTHREAD_CFLAGS)				\
--- NetworkManager-0.7rev3588/configure.in.orig	2008-04-22 22:56:49.000000000 +0200
+++ NetworkManager-0.7rev3588/configure.in	2008-04-22 23:04:19.847378098 +0200
@@ -76,7 +76,7 @@
 dnl
 AC_C_BIGENDIAN
 
-AC_ARG_WITH(distro, AS_HELP_STRING([--with-distro=DISTRO], [Specify the Linux distribution to target: One of redhat, suse, gentoo, debian, arch, slackware, paldo or mandriva]))
+AC_ARG_WITH(distro, AS_HELP_STRING([--with-distro=DISTRO], [Specify the Linux distribution to target: One of redhat, suse, gentoo, debian, arch, slackware, paldo, mandriva or pld]))
 if test "z$with_distro" = "z"; then
 	AC_CHECK_FILE(/etc/redhat-release,with_distro="redhat")
 	AC_CHECK_FILE(/etc/SuSE-release,with_distro="suse")
@@ -87,6 +87,7 @@
 	AC_CHECK_FILE(/etc/slackware-version,with_distro="slackware")
 	AC_CHECK_FILE(/etc/frugalware-release,with_distro="frugalware")
 	AC_CHECK_FILE(/etc/mandriva-release,with_distro="mandriva")
+	AC_CHECK_FILE(/etc/pld-release,with_distro="pld")
 	if test "z$with_distro" = "z"; then
 		with_distro=`lsb_release -is`
 	fi
@@ -98,7 +99,7 @@
 	exit 1
 else
 	case $with_distro in
-		redhat|suse|gentoo|debian|slackware|arch|paldo|frugalware|mandriva) ;;
+		redhat|suse|gentoo|debian|slackware|arch|paldo|frugalware|mandriva|pld) ;;
 		*)
 			echo "Your distribution (${with_distro}) is not yet supported!  (patches welcome)"
 			exit 1
@@ -114,6 +115,7 @@
 AM_CONDITIONAL(TARGET_PALDO, test x"$with_distro" = xpaldo)
 AM_CONDITIONAL(TARGET_FRUGALWARE, test x"$with_distro" = xfrugalware)
 AM_CONDITIONAL(TARGET_MANDRIVA, test x"$with_distro" = xmandriva)
+AM_CONDITIONAL(TARGET_PLD, test x"$with_distro" = xpld)
 
 if test x"$with_distro" = xgentoo -o x"$with_distro" = xmandriva ; then
 	AC_ARG_WITH([mdns_provider],
--- NetworkManager-0.7rev3096/src/backends/NetworkManagerPLD.c	1970-01-01 01:00:00.000000000 +0100
+++ NetworkManager-0.7rev3588/src/backends/NetworkManagerPLD.c	2008-04-22 23:49:54.422378684 +0200
@@ -0,0 +1,267 @@
+/* NetworkManager -- Network link manager
+ *
+ * Narayan Newton <narayan_newton@yahoo.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ * (C) Copyright 2004 RedHat, Inc.
+ * (C) Copyright 2004 Narayan Newton
+ * (C) Copyright 2005 wrobell <wrobell@pld-linux.org>
+ * (C) Copyright 2005 Patryk Zawadzki <patrys@pld-linux.org>
+ * (C) Copyright 2007 Marcin Banasiak <megabajt@pld-linux.org>
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <signal.h>
+#include <arpa/inet.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "NetworkManagerGeneric.h"
+#include "NetworkManagerSystem.h"
+#include "NetworkManagerUtils.h"
+#include "nm-device.h"
+#include "nm-device-802-3-ethernet.h"
+#include "nm-device-802-11-wireless.h"
+#include "nm-utils.h"
+#include "shvar.h"
+
+/*
+ * nm_system_init
+ *
+ * Initializes the distribution-specific system backend
+ *
+ */
+void nm_system_init (void)
+{
+	nm_generic_init ();
+}
+
+
+/*
+ * nm_system_device_flush_ip4_routes
+ *
+ * Flush all routes associated with a network device
+ *
+ */
+void nm_system_device_flush_ip4_routes (NMDevice *dev)
+{
+	nm_generic_device_flush_ip4_routes (dev);
+}
+
+
+/*
+ * nm_system_device_flush_ip4_routes_with_iface
+ *
+ * Flush all routes associated with a network device
+ *
+ */
+void nm_system_device_flush_ip4_routes_with_iface (const char *iface)
+{
+	nm_generic_device_flush_ip4_routes_with_iface (iface);
+}
+
+
+/*
+ * nm_system_device_replace_default_route
+ *
+ * Add default route to the given device
+ *
+ */
+void
+nm_system_device_replace_default_route (const char *iface,
+                                        guint32 gw,
+                                        guint32 mss)
+{
+	nm_generic_device_replace_default_route (iface, gw, mss);
+}
+
+
+/*
+ * nm_system_device_add_route_via_device_with_iface
+ *
+ * Add route to the given device
+ *
+ */
+void nm_system_device_add_route_via_device_with_iface (const char *iface, const char *route)
+{
+	nm_generic_device_add_route_via_device_with_iface (iface, route);
+}
+
+
+/*
+ * nm_system_device_has_active_routes
+ *
+ * Find out whether the specified device has any routes in the routing
+ * table.
+ *
+ */
+gboolean nm_system_device_has_active_routes (NMDevice *dev)
+{
+	return FALSE;
+}
+
+
+/*
+ * nm_system_device_flush_ip4_addresses
+ *
+ * Flush all network addresses associated with a network device
+ *
+ */
+void nm_system_device_flush_ip4_addresses (NMDevice *dev)
+{
+	nm_generic_device_flush_ip4_addresses (dev);
+}
+
+
+/*
+ * nm_system_device_flush_ip4_addresses_with_iface
+ *
+ * Flush all network addresses associated with a network device
+ *
+ */
+void nm_system_device_flush_ip4_addresses_with_iface (const char *iface)
+{
+	nm_generic_device_flush_ip4_addresses_with_iface (iface);
+}
+
+
+/*
+ * nm_system_enable_loopback
+ *
+ * Bring up the loopback interface
+ *
+ */
+void nm_system_enable_loopback (void)
+{
+	nm_generic_enable_loopback ();
+}
+
+
+/*
+ * nm_system_flush_loopback_routes
+ *
+ * Flush all routes associated with the loopback device, because it
+ * sometimes gets the first route for ZeroConf/Link-Local traffic.
+ *
+ */
+void nm_system_flush_loopback_routes (void)
+{
+	nm_generic_flush_loopback_routes ();
+}
+
+
+/*
+ * nm_system_flush_arp_cache
+ *
+ * Flush all entries in the arp cache.
+ *
+ */
+void nm_system_flush_arp_cache (void)
+{
+	nm_generic_flush_arp_cache ();
+}
+
+
+/*
+ * nm_system_kill_all_dhcp_daemons
+ *
+ * Kill all DHCP daemons currently running, done at startup.
+ *
+ */
+void nm_system_kill_all_dhcp_daemons (void)
+{
+	nm_spawn_process ("/bin/killall -q dhclient");
+}
+
+
+/*
+ * nm_system_update_dns
+ *
+ * Invalidate the nscd host cache, if it exists, since
+ * we changed resolv.conf.
+ *
+ */
+void nm_system_update_dns (void)
+{
+	/* Not implemented */
+}
+
+
+/*
+ * nm_system_restart_mdns_responder
+ *
+ * Restart the multicast DNS responder so that it knows about new
+ * network interfaces and IP addresses.
+ *
+ */
+void nm_system_restart_mdns_responder (void)
+{
+	/* Not implemented */
+}
+
+
+typedef struct PLDSystemConfigData
+{
+	NMIP4Config *	config;
+	gboolean	use_dhcp;
+	gboolean	system_disabled;
+} PLDSystemConfigData;
+
+
+/*
+ * nm_system_activate_nis
+ *
+ * set up the nis domain and write a yp.conf
+ *
+ */
+void nm_system_activate_nis (NMIP4Config *config)
+{
+}
+
+/*
+ * nm_system_shutdown_nis
+ *
+ * shutdown ypbind
+ *
+ */
+void nm_system_shutdown_nis (void)
+{
+}
+
+/*
+ * nm_system_set_hostname
+ *
+ * set the hostname
+ *
+ */
+void nm_system_set_hostname (NMIP4Config *config)
+{
+}
+
+/*
+ * nm_system_should_modify_resolv_conf
+ *
+ * Can NM update resolv.conf, or is it locked down?
+ */
+gboolean nm_system_should_modify_resolv_conf (void)
+{
+	return TRUE;
+}
